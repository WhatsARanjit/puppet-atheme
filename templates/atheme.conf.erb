/******************************************************************************
 * MODULES SECTION.                                                           *
 ******************************************************************************/

/* Protocol module.
 *
 * Please select a protocol module. Different servers use different protocols.
 * Below is a listing of ircd's known to work with the various protocol modules
 * available.
 *
 * If your IRCd vendor has supplied a module file, build it and load it here
 * instead of one above.
 */
loadmodule "modules/protocol/<%= @protocol %>";

/* Protocol mixins.
 *
 * These should be used if you do not have/want certain features on your
 * network that your ircd normally has. If you do not know what this means,
 * you do not need any of them.
 */
#loadmodule "modules/protocol/mixin_nohalfops";
#loadmodule "modules/protocol/mixin_noholdnick";
#loadmodule "modules/protocol/mixin_noprotect";
#loadmodule "modules/protocol/mixin_noowner";

/* Database backend module.
 * 
 * Please select a database backend module. Different backends allow for
 * different ways in which the services data can be manipulated. YOU MAY
 * ONLY HAVE ONE OF THESE BACKENDS LOADED.
 * 
 * The following backends are available:
 * 
 * Atheme 0.1 flatfile database format          modules/backend/flatfile
 * Open Services Exchange database format       modules/backend/opensex
 * 
 * Most networks will want opensex.
 */
loadmodule "modules/backend/opensex";

/* Crypto module.
 *
 * If you would like encryption for your services passwords, please
 * select a module here. Note that upon starting with a crypto module
 * YOUR PASSWORDS ARE IMMEDIATELY AND IRREVERSIBLY CONVERTED. Make at
 * least TWO backups of your database before experimenting with this.
 * If you have several thousand accounts, this conversion may take
 * appreciable time.
 *
 */
loadmodule "modules/crypto/posix";

/* Authentication module.
 *
 * These allow using passwords from an external system. The password given
 * when registering a new account is also checked against the external
 * system.
 *
 */
#loadmodule "modules/auth/ldap";

/******************************************************************************
 * SERVICES RUNTIME CONFIGURATION SECTION.                                    *
 ******************************************************************************/

/* The serverinfo{} block defines how we appear on the IRC network. */
serverinfo {
	/* name
	 * The server name that this program uses on the IRC network.
	 * This is the name you'll have to use in C:/N:Lines. It must be
	 * unique on the IRC network and contain at least one dot, but does
	 * not have to be equal to any DNS name.
	 */
	name = "<%= @server_name %>";

	/* desc
	 * The ``server comment'' we send to the IRC network.
	 */
	desc = "<%= @desc %>";

	/* numeric
	 * Some protocol drivers (Charybdis, Ratbox2, Hybrid, P10, IRCNet)
	 * require a server id, also known as a numeric. Please consult your
	 * ircd's documentation when providing this value. 
	 */
	numeric = "<%= @numeric %>";

	/* (*)recontime
	 * The number of seconds before we reconnect to the uplink.
	 */
	recontime = 10;

	/* (*)netname
	 * The name of your network.
	 */
	netname = "<%= @netname %>";

	/* (*)hidehostsuffix
	 * P10 +x host hiding gives <account>.<hidehostsuffix>.
	 * If using +x on asuka/bircd/undernet, this must agree
	 * with F:HIDDEN_HOST.
	 */
	hidehostsuffix = "<%= @hidehostsuffix %>";

	/* (*)adminname
	 * The name of the person running this service.
	 */
	adminname = "<%= @adminname %>";

	/* (*)adminemail
	 * The email address of the person running this service.
	 */
	adminemail = "<%= @adminemail %>";

	/* (*)registeremail
	 * The email address that messages should be originated from.
	 * If this is not set, then "noreply.$adminemail" will be used.
	 */
	registeremail = "<%= @registeremail %>";

	/* (*)hidden
	 * If this is enabled, Atheme will indicate to the uplink IRCd
	 * that it should not be included in /links output.  This only works
	 * on the following IRCds at present: charybdis, hybrid, ircd-seven,
	 * ratbox, shadowircd.
	 */
	#hidden;

	/* (*)mta
	 * The full path to your mail transfer agent.
	 * This is used for email authorization and password retrieval.
	 * Comment this out to disable sending email.
	 * Warning: sending email can disclose the IP of your services
	 * unless you take precautions (not discussed here further).
	 */
	mta = "<%= @mta %>";

	/* (*)loglevel
	 * Specify the default categories of logging information to record
	 * in the master Atheme logfile, usually var/atheme.log.
	 *
	 * Options include:
	 *      debug, all      - meta-keyword for all possible categories
	 *      trace           - meta-keyword for a little bit of info
	 *      misc            - like trace, but with some more miscellaneous info
	 *      notice          - meta-keyword for notice-like information
	 * ------------------------------------------------------------------------------
	 *      error           - critical errors
	 *      info            - miscillaneous log notices
	 *      verbose         - A bit more verbose than info, not quite as spammy as debug
	 *      commands        - all command use
	 *      admin           - administrative command use
	 *      register        - account and channel registrations
	 *      set             - changes of account or channel settings
	 *      request         - user requests (currently only vhosts)
	 *      network         - log notices related to network status
	 *      rawdata         - log raw data sent and received by services
	 *      wallops         - <not yet used>
	 */
	loglevel = { error; info; admin; network; wallops; };

	/* (*)maxlogins
	 * What is the maximum number of sessions allowed to login to one
	 * username? This reduces potential abuse. It is only checked on login.
	 */
	maxlogins = 5;

	/* (*)maxusers
	 * What are the maximum usernames that one email address can register?
	 * Set to 0 to disable this check (it can be slow currently).
	 */
	maxusers = 5;

	/* (*)mdlimit
	 * How many metadata entries can be added to an object?
	 */
	mdlimit = 30;

	/* (*)emaillimit, emailtime
	 * The maximum number of emails allowed to be sent in
	 * that amount of time (seconds). If this is exceeded,
	 * wallops will be sent, at most one per minute.
	 */
	emaillimit = 10;
	emailtime = 300;

	/* (*)auth
	 * What type of username registration authorization do you want?
	 * If "email", Atheme will send a confirmation email to the address to
	 * ensure it's valid. If registration is not completed within one day,
	 * the username will expire. If "none", no message will be sent and
	 * the username will be fully registered.
	 * Valid values are: email, none.
	 */
	auth = none;

	/* casemapping
	 * Specify the casemapping to use. Almost all TSora (and any that follow
	 * the RFC correctly) ircds will use rfc1459 casemapping. Bahamut, Unreal,
	 * and other ``Dalnet'' ircds will use ascii casemapping.
	 * Valid values are: rfc1459, ascii.
	 */
	casemapping = rfc1459;
};

/* uplink{} blocks define connections to IRC servers.
 * Multiple may be defined but only one will be used at a time (IRC
 * being a tree shaped network). Atheme does not currently link over SSL.
 * To link Atheme over ssl, please connect Atheme to a local ircd and have that
 * connect to your network over SSL.
 */
uplink "<%= @uplink %>" {
	// The server name of the ircd you're linking to goes above.

	// host
	// The hostname to connect to.
	host = "<%= @host %>";

	// vhost
	// The source IP to connect from, used on machines with multiple interfaces.
<% if @vhost -%>
	vhost = "<%= @vhost %>";
<% end -%>

<% if @send_password -%>
	// send_password
	// The password sent for linking.
	send_password = "<%= @send_password %>";

<% end -%>
<% if @receive_password -%>
	// receive_password
	// The password received for linking.
	receive_password = "<%= @receive_password %>";

<% end -%>
<% if @password -%>
  // password
  // If you want to have same send_password and accept_password, you
  // can specify both using 'password' instead of individually.
  password = "<%= @password %>";

<% end -%>
	// port
	// The port to connect to.
	port = <%= @port %>;
};

/* HTTP server configuration.
 *
 * The httpd {} block contains settings specific to the HTTP server module.
 *
 * The HTTP server in Services is used for serving XMLRPC requests. It can
 * also serve static documents and statistics pages.
 */
httpd {
	/* host
	 * The host that the HTTP server will listen on.
	 * Use 0.0.0.0 if you want to listen on all available hosts.
	 */
	host = "0.0.0.0";

	/* host (ipv6)
	 * If you want, you can have Atheme listen on an IPv6 host too.
	 * Use :: if you want to listen on all available IPv6 hosts.
	 */
	#host = "::";

	/* www_root
	 * The directory that contains the files that should be served by the httpd.
	 */
	www_root = "/var/www";

	/* port
	 * The port that the HTTP server will listen on.
	 */
	port = 8080;
};

/* LDAP configuration.
 *
 * The ldap {} block contains settings specific to the LDAP authentication
 * module.
 */
ldap {
	/* (*)url
	 * LDAP URL of the server to use.
	 */
	url = "ldap://127.0.0.1";

	/* (*)dnformat
	 * Format string to convert an account name to an LDAP DN.
	 * Must contain exactly one %s which will be replaced by the account
	 * name.
	 * Services will attempt a simple bind with this DN and the given
	 * password; if this is successful the password is considered correct.
	 */
	dnformat = "cn=%s,dc=jillestest,dc=com";
};

/******************************************************************************
 * LOGGING SECTION.                                                           *
 ******************************************************************************/

/*
 * logfile{} blocks can be used to set up log files other than the master
 * logfile used by services, which is controlled by serverinfo::loglevel.
 *
 * The various logging categories are:
 *      debug, all      - meta-keyword for all possible categories
 *      trace           - meta-keyword for a little bit of info
 *      misc            - like trace, but with some more miscillaneous info
 *      notice          - meta-keyword for notice-like information
 * ------------------------------------------------------------------------------
 *      error           - critical errors
 *      info            - miscillaneous log notices
 *      verbose         - A bit more verbose than info, not quite as spammy as debug
 *      commands        - all command use
 *      admin           - administrative command use
 *      register        - account and channel registrations
 *      set             - changes of account or channel settings
 *      request         - user requests (currently only vhosts)
 *      network         - log notices related to network status
 *      rawdata         - log raw data sent and received by services
 *      wallops         - <not yet used>
 *      denycmd         - security model denials (commands, permissions)
 */

/*
 * This block logs all account and channel registrations and drops,
 * and account and channel setting changes to var/account.log.
 */
logfile "var/account.log" { register; set; };

/*
 * This block logs all command use to var/commands.log.
 */
logfile "var/commands.log" { commands; };

/*
 * This block logs all security auditing information.
 */
logfile "var/audit.log" { denycmd; };

/*
 * You can log to IRC channels, and even split it by category, too.
 * This entry provides roughly the same functionality as the old snoop
 * feature.
 */
logfile "#services" { error; info; admin; request; register; denycmd; };

/*
 * This block logs to server notices.
 */
logfile "!snotices" { error; info; request; denycmd; };

/******************************************************************************
 * GENERAL PARAMETERS CONFIGURATION SECTION.                                  *
 ******************************************************************************/

/* The general {} block defines general configuration options. */
general {
	/* (*)permissive_mode
	 * Whether or not security denials should be soft denials instead of
	 * hard denials.  If security denials are soft denials, then they will
	 * only be logged to the denial log.
	 */
	#permissive_mode;

	/* (*)helpchan
	 * Network help channel. Shown to users when they request
	 * help for a command that doesn't exist.
	 */
	#helpchan = "#help";

	/* (*)helpurl
	 * Network webpage for services help. Shown to users when they
	 * request help for a command that doesn't exist.
	 */
	#helpurl = "http://www.stack.nl/~jilles/irc/atheme-help/";

	/* (*)silent
	 * If you want to prevent services from sending
	 * WALLOPS/GLOBOPS about things uncomment this.
	 * Not recommended.
	 */
	#silent;

	/* (*)verbose_wallops
	 * If you want services to send you more information about
	 * events that are occuring (in particular AKILLs), uncomment the
	 * directive below.
	 *
	 * WARNING! This may result in large amounts of wallops/globops
	 * floods.
	 */
	#verbose_wallops;

	/* (*)join_chans
	 * Should ChanServ be allowed to join registered channels?
	 * This option is useful for the fantasy command set.
	 *
	 * If enabled, you can tell ChanServ to join via SET GUARD ON.
	 *
	 * If you use ircu-like ircd (asuka, bircd, undernet), you must
	 * leave this enabled, and put guard in default cflags.
	 *
	 * For ratbox it is recommended to leave it on and put guard in 
	 * default cflags, in order that ChanServ does not have to join/part
	 * to do certain things. On the other hand, enabling this increases
	 * potential for bots fighting with ChanServ.
	 *
	 * Regardless of this option, ChanServ will temporarily join 
	 * channels which would otherwise be empty if necessary to enforce
	 * akick/restricted/close, and to change the TS if changets is
	 * enabled.
	 */
	join_chans;

	/* (*)leave_chans
	 * Do we leave registered channels after everyone else has left?
	 * Turning this off serves little purpose, except to mark "official"
	 * network channels by keeping them open, and to preserve the
	 * topic and +beI lists.
	 */
	leave_chans;

	/* secure
	 * Do you want to require the use of /msg <service>@<services host>?
	 * Turning this on helps protect against spoofers, but is disabled
	 * as most networks do not presently use it.
	 */
	#secure;

	/* (*)uflags
	 * The default flags to set for usernames upon registration.
	 * Valid values are: hold, neverop, noop, hidemail, nomemo, emailmemos,
	 * enforce, privmsg, private, quietchg and none.
	 */
	uflags = { hidemail; };

	/* (*)cflags
	 * The default flags to set for channels upon registration.
	 * Valid values are: hold, secure, verbose, verbose_ops, keeptopic,
	 * topiclock, guard, private, nosync, limitflags, pubacl and none.
	 */
	cflags = { verbose; guard; };

	/* (*)raw
	 * Do you want to allow SRAs to use the RAW and INJECT commands?
	 * These commands are for debugging. If you don't know how to use them
	 * then don't enable them. They are not supported.
	 */
	#raw;

	/* (*)flood_msgs
	 * Do you want services to detect floods?
	 * Set to how many messages before a flood is triggered.
	 * Note that some messages that need a lot of processing count
	 * as two or four messages.
	 * If services receives `flood_msgs' within `flood_time' the user will
	 * trigger the flood protection.
	 * Setting this to zero disables flood protection.
	 */
	flood_msgs = 7;

	/* (*)flood_time
	 * Do you want services to detect floods?
	 * Set to how long before the counter resets.
	 * If services receives `flood_msgs' within `flood_time' the user will
	 * trigger the flood protection.
	 */
	flood_time = 10;

	/* (*)ratelimit_uses
	 * After how many uses of a command will users be throttled.
	 * After `ratelimit_uses' of a command within `ratelimit_period', users
	 * will not be able to run that ratelimited command until the period is up.
	 * Comment this, ratelimit_period below or both options out to disable rate limiting.
	 * Currently used in helpserv/helpme, helpserv/ticket, hostserv/request, 
	 * nickserv/register and chanserv/register.
	 */
	ratelimit_uses = 5;

	/* (*)ratelimit_period
	 * After how much time (in seconds) will the ratelimit_uses counter reset.
	 * After `ratelimit_uses' of a command within `ratelimit_period', users
	 * will not be able to run that ratelimited command until the period is up.
	 * Comment this, ratelimit_uses above or both options out to disable rate limiting.
	 * Currently used in helpserv/helpme, helpserv/ticket, hostserv/request, 
	 * nickserv/register and chanserv/register.
	 */
	ratelimit_period = 60;

	/* (*)kline_time
	 * The default expire time for KLINE's in days.
	 * Setting this to 0 makes all KLINE's permanent.
	 */
	kline_time = 7;

	/* (*)kline_with_ident
	 * KLINE user@host instead of *@host.
	 * Applies to all automatic KLINE's set by services.
	 */
	#kline_with_ident;

	/* (*)kline_verified_ident
	 * KLINE *@host if the first character of the ident is ~,
	 * irrespective of the value of kline_with_ident.
	 * /
	#kline_verified_ident;

	/* (*)clone_time
	 * This is the default expiry time for CLONE exemptions in minutes.
	 * Setting this to 0 makes all CLONE exemptions permanent.
	 */
	clone_time = 0;

	/* commit_interval
	 * The time between database writes in minutes.
	 */
	commit_interval = 5;

	/* (*)default_clone_allowed
	 * The limit after which clones will be KILLed or TKLINEd.
	 * Used by operserv/clones.
	 */
	default_clone_allowed = 5;

	/* (*)default_clone_warn
	 * The limit after which clones will be warned that they may not
	 * have any more concurrent connections. Should be lower than
	 * default_clone_allowed . Used by operserv/clones.
	 */
	default_clone_warn = 4;

	/* (*)clone_identified_increase_limit
	 * If this option is enabled, the clone limit for a IP/host will
	 * be increased by 1 per clone that's identified to services.
	 * This has a limit of double the clone limits above.
	 */
	clone_identified_increase_limit;

	/* (*)uplink_sendq_limit
	 * The maximum amount of data that may be queued to be sent
	 * to the uplink, in bytes. This should be enough to contain
	 * Atheme's response to the netburst, but smaller than the
	 * IRCd's sendq limit for servers.
	 */
	uplink_sendq_limit = 1048576;

	/* (*)language
	 * Language to use for channel and oper messages and as default
	 * for users.
	 */
	language = "en";

	/* exempts
	 * This block contains a list of user@host masks. Users matching any
	 * of these will not be automatically K:lined by services.
	 */
	exempts {
	};

	/* allow_taint
	 * By enabling this option, Atheme will run in configurations where
	 * the upstream will not provide support.  By enabling this feature,
	 * you void any perceived rights to support.
	 */
	#allow_taint;

	/* (*)immune_level
	 * This option allows you to customize the operlevel which gets kick
	 * immunity privileges.
	 *
	 * The following flags are available:
	 *    immune - require whatever ircd usermode is needed for kick
	 *             immunity (this is the default);
	 *    admin  - require admin privileges for kick immunity
	 *    ircop  - require any ircop privileges for kick immunity (umode +o) 
	 */
	immune_level = immune;

	/* show_entity_id
	 * This makes nick/user & group entity IDs visible to everyone, rather
	 * than just opers with user:auspex or group:auspex privileges.
	 */
	show_entity_id;
};

/******************************************************************************
 * OPERATOR AND PRIVILEGES CONFIGURATION SECTION.                             *
 ******************************************************************************/

/* Operator configuration
 * See the PRIVILEGES document for more information.
 * NOTE: All changes apply immediately upon rehash. You may need
 * to send a signal (killall -HUP atheme-services) to regain control.
 */
/* (*) Operclasses specify groups of services operator privileges */
/* The "user" operclass specifies privileges all users get.
 * This may be empty (default) in which case users get no special privileges.
 * If you use the security/cmdperm module, you will need to grant command: privileges
 * to every command that you want users to be able to use.
 */
operclass "user" { };

/* The "ircop" operclass specifies privileges all IRCops get.
 * This may be empty in which case IRCops get no privs.
 * At least chan:cmodes, chan:joinstaffonly and general:auspex are suggested.
 */
operclass "ircop" {
	privs {
		special:ircop;
	};

	privs {
		user:auspex;
		user:admin;
		user:sendpass;
		user:vhost;
		user:mark;
	};

	privs {
		chan:auspex;
		chan:admin;
		chan:cmodes;
		chan:joinstaffonly;
	};

	privs {
		general:auspex;
		general:helper;
		general:viewprivs;
		general:flood;
	};

	privs {
		operserv:omode;
		operserv:akill;
		operserv:jupe;
		operserv:global;
	};

	privs {
		group:auspex;
		group:admin;
	};
};

operclass "sra" {
	/* You can inherit privileges from a lower operclass. */
	extends "ircop";

	privs {
		user:hold;
		user:regnolimit;
	};

	privs {
		general:metadata;
		general:admin;
	};

	privs {
		#operserv:massakill;
		#operserv:akill-anymask;
		operserv:noop;
		operserv:grant;
		#operserv:override;
	};

	/* needoper
	 * Only grant privileges to IRC users in this oper class if they
	 * are opered; other use of privilege (channel succession, XMLRPC,
	 * etc.) is unaffected by this.
	 */
	needoper;
};


/* (*) Operator blocks specify accounts with certain privileges
 * Oper classes must be defined before they are used in operator blocks.
 */
operator "jilles" {
	/* operclass */
	operclass = "sra";
	/* password
	 * Normally, the user needs to identify/log in using the account's
	 * password, and may need to be an IRCop (see operclass::needoper
	 * above). If you consider this not secure enough, you can
	 * specify an additional password here, which the user must enter
	 * using the OperServ IDENTIFY command, before the privileges can
	 * be used.
	 * The password must be encrypted if a crypto module is in use.
	 */
	#password = "$1$3gJMO9by$0G60YE6GqmuHVH3AnFPor1";
};
